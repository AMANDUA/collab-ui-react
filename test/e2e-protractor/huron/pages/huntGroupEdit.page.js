export class HuntGroupEditPage {
  constructor() {
    this.backArrow = element(by.css('i.icon.icon-arrow-back'));
    this.subtitleAlertNameInput = element.all(by.css('div.cs-input-group.cs-input-text')).first();
    this.subtitleHGNumInput = element.all(by.css('div.cs-input-group.cs-input-undefined')).first();
    this.numCard = element(by.css('div.cs-card-number'));
    this.callSettingsTitle = element(by.cssContainingText('h4.section__title', 'Call Settings'));
    this.subTtileMaxRing = element(by.cssContainingText('h5.sub-section__title', 'Max Ring Time'));
    this.subTitleMaxRingDesc = element(by.cssContainingText('p.sub-section__description', 'Maximum amount of time a member'));
    this.allComboBox = element.all(by.css('div.combo-box'));
    this.ringDropDwon = this.allComboBox.get(0);
    this.seconds = element(by.cssContainingText('div.secondary-label', 'Seconds'));
    this.maxWaitTime = element(by.cssContainingText('h5.sub-section__title', 'Caller Max Wait Time'));
    this.maxWaitTimeDesc = element(by.cssContainingText('p.sub-section__description', 'Maximum amount of time caller will wait before being sent to fallback destination'));
    this.maxWaitDropDwon = this.allComboBox.get(1);
    this.minutes = element(by.cssContainingText('div.secondary-label', 'Minutes'));
    this.fallbackDest = element(by.cssContainingText('h5.sub-section__title', 'Fallback Destination'));
    this.fallbackDestDesc = element(by.cssContainingText('p.sub-section__description', 'Calls are sent to this number if not answered by any of the members'));
    this.fallbackCardMember = element(by.css('div.card-member'));
    this.fallbackVMChk = element(by.id('ckSendToVoicemail'));
    this.fallbackVMDesc = element(by.cssContainingText('span.ng-binding', 'Send call directly to voicemail'));
    this.fallbackTitle = element(by.cssContainingText('h4.section__title', 'Fallback Destination'));
    this.fallbackSubTitle = element(by.cssContainingText('h5.sub-section__title', 'Fallback Destination Rule'));
    this.fallBackDestRadio = element(by.id('fallback'));
    this.fallBackDestRadioTitle = element(by.cssContainingText('span', 'Fallback Destination'));
    this.fallBackDestHelp = element(by.cssContainingText('p.cs-input__help-text', 'Always use fallback destination number in all scenarios.')); 
    this.fallBackAlternatRadio = element(by.id('alternate'));
    this.fallBackAlternateRadioTitle = element(by.cssContainingText('span', 'Alternate Fallback Destination'));
    this.fallBackAlternateHelp = element(by.cssContainingText('p.cs-input__help-text', 'Always use alternative fallback destination number in all scenarios.')); 
    this.altFallBackRadio = element(by.cssContainingText('span', 'Alternate Fallback Destination'));
    this.autoFallBackRadio = element(by.cssContainingText('span', 'Automatic'));
    this.fallBackAutomaticRadio = element(by.id('automatic'));
    this.fallBackAutomaticRadioTitle = element(by.cssContainingText('span', 'Automatic'));
    this.fallBackAutomaticHelp = element(by.cssContainingText('p.cs-input__help-text', 'System automatically will switch between fallback destination during call-no-answer and alternative fallback destination during local network outage.')); 
    this.sparkCallAppTitle = element(by.cssContainingText('h4.section__title', 'Hunt Group calls to Cisco Spark App'));
    this.sparkCallAppSubTitle = element(by.cssContainingText('h5.sub-section__title', 'Simultaneously send Hunt Group calls to membersâ€™ Cisco Spark app'));
    this.callToSparkToggle = element(by.css('uc-hunt-group-calls-to-spark-app'));
    this.huntMethodsSection = element(by.cssContainingText('h4.section__title', 'Hunting Method and Members'));
    this.huntingMetdhodsTitle = element(by.cssContainingText('h5.sub-section__title', 'Hunting Method'));
    this.huntingMethodsDesc = element(by.cssContainingText('p.sub-section__description', 'Define which member gets the call first.'));
    this.longestIdle = element(by.css('[ng-click="$ctrl.setHuntMethod(\'DA_LONGEST_IDLE_TIME\')"]'));
    this.broadcast = element(by.css('[ng-click="$ctrl.setHuntMethod(\'DA_BROADCAST\')"]'));
    this.circular = element(by.css('[ng-click="$ctrl.setHuntMethod(\'DA_CIRCULAR\')"]'));
    this.topDown = element(by.css('[ng-click="$ctrl.setHuntMethod(\'DA_TOP_DOWN\')"]'));
    this.membersTitle = element(by.cssContainingText('h5.sub-section__title', 'Hunt Group Members'));
    this.membersDesc = element(by.cssContainingText('p.sub-section__description', 'Drag and drop to reorder members hunt group sequence'));
    this.membersAdd = element(by.id('callfeaturememberadd'));
    this.membersSearch = element(by.id('callfeaturemembersearch'));
  }
};
