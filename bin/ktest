#!/bin/bash

export WX2_ADMIN_WEB_CLIENT_HOME="${WX2_ADMIN_WEB_CLIENT_HOME:-$(pwd)}"

if [ -z "${WX2_ADMIN_WEB_CLIENT_HOME}" ]; then
    >&2 echo "Error: WX2_ADMIN_WEB_CLIENT_HOME is not set, please export this environment variable first."
    exit 1
fi

if ! type parallel >/dev/null 2>&1; then
    >&2 echo "Error: no 'parallel' program found, please install 'parallel' first. (Run 'brew install parallel' on Mac, or see: http://www.gnu.org/software/parallel/ )"
    exit 1
fi

function ex_usage {
    echo "Run karma tests on given files."
    echo ""
    echo "usage: $(basename "$0") [--help|-h|-?] [--debug] <karma_spec_file>"
    echo ""
    echo "ex. single karma spec file"
    echo "  $(basename "$0") trial.service.spec.js"
    echo ""
    echo "ex. all spec files in the parent dir"
    echo "  $(basename "$0") ../*.spec.js"
    echo ""
    echo "ex. all spec files found under the './app' dir"
    echo "  find ./app -iname \\*spec.js | $(basename "$0")"
}

function print_notice_ktest_modular {
    echo ""
    echo "********************** ATTENTION **********************"
    echo ""
    echo "You should use modular testing for quicker unit tests."
    echo "Requires angular module to be self-contained (modular)."
    echo ""
    echo "\`export KTEST__MODULAR=true\`"
    echo ""
    echo "Read more: https://sqbu-github.cisco.com/WebExSquared/wx2-admin-web-client/blob/master/docs/modular-unit-testing.md"
    echo ""
    echo "*******************************************************"
    echo ""
}

# early out if looking for usage
if [[ "$1" == "--help" || "$1" == "-h" || "$1" == "-?" ]]; then
    ex_usage
    exit 1
fi

# shellcheck disable=SC1090
source "${WX2_ADMIN_WEB_CLIENT_HOME}/bin/include/core-helpers"
# shellcheck disable=SC1090
source "${WX2_ADMIN_WEB_CLIENT_HOME}/bin/include/ktest-helpers"

# always use physical path (vs. a symlinked path)
WX2_ADMIN_WEB_CLIENT_HOME="$(get_physical_path "$WX2_ADMIN_WEB_CLIENT_HOME")"
# set old generation heap limit to 3GB
# append --max-old-space-size with any provided arguments
KTEST__NODE_ARGS="${KTEST__NODE_ARGS} --max-old-space-size=3072"

# ----------
# otherwise collect '--*' args for passing through to gulp
no_parallel=
pass_through_opts=
args=( $@ )
i=0
for opt in "${args[@]}"; do
    case "$opt" in
        --no-parallel )
            no_parallel="true"
            unset -v "args[$i]"
            ;;
        --* )
            pass_through_opts="$pass_through_opts ${args[$i]}"
            unset -v "args[$i]"
            ;;
    esac
    let "i += 1"
done

# update positional params after filtering out '--*' args
set -- "${args[@]}"

# remap stdin to positional params
set -- "${1:-$(</dev/stdin)}" "${@:2}"

# ----------
# special case:
# - OS X users report slower run-times using parallel over single process
# - disable parallel usage for OS X for now
# - allow override by export of 'KTEST__ALLOW_PARALLEL'
if [ "$(uname)" = "Darwin" ] && [ -z "$KTEST__ALLOW_PARALLEL" ]; then
    no_parallel="true"
fi

# ----------
# compose the raw file list
temp_dir=$(mk_temp_dir_for_ktest)
flist=$(mktemp "$temp_dir/flist.XXXXX")

# generate a file list
fname=
# shellcheck disable=SC2068
for arg in $@; do
    if [[ "$arg" = /* ]]; then
        fname="$arg"
    else
        fname="$(pwd -P)/$arg"
    fi
    ls -1 "$fname" >> "$flist" 2>/dev/null
done

# args length after removing pass_through_opts
args_length="${#args[@]}"

karma_shim_tpl="karma.shim.tpl.js"

# only run modular if we specify arguments
if [ "${args_length}" -gt 0 ]; then
    if [ "${KTEST__MODULAR}" = "true" ]; then
        karma_shim_tpl="karma.shim.modular.tpl.js"
    else
        print_notice_ktest_modular
    fi
fi

# ----------
# split the raw file list
shim_tpl="${WX2_ADMIN_WEB_CLIENT_HOME}/karma/${karma_shim_tpl}"
total_specs=$(wc -l "$flist" | awk '{print $1;}')

# num cores is used to determine num spec files to include / shim file
# - it can be overridden by 'KTEST__NUM_CORES' environment var
num_cores=${KTEST__NUM_CORES:-$(num_cpus)}
if [ "${no_parallel}" = "true" ]; then
    num_cores=1
fi
# shellcheck disable=SC2086
lines_per_file=$(calc_lines_per_file $total_specs $num_cores)

# shellcheck disable=SC2086
# list all spec files, splitting list into roughly equal sizes
sort "$flist" \
    | split -l $lines_per_file - "$temp_dir/flist-split."

# ----------
# process split lists
# - process them into shim files
# - compose a string of multiple '--shimFile=...' args
shim_file_args=""
for i in "$temp_dir"/flist-split.*; do
    printf "%-48s %s\n" "[INFO] Running: making list for injection... " "${i}.require-list"
    mk_require_list_file "${i}" > "${i}.require-list"

    karma_shim_file="${WX2_ADMIN_WEB_CLIENT_HOME}/karma/$(basename "$i").karma.shim.js"
    printf "%-45s %s\n" "[INFO] Running: making temp karma shim files... " "$karma_shim_file"
    inject_require_list_file "${i}.require-list" "$shim_tpl" > "$karma_shim_file"

    shim_file_args="$shim_file_args --shimFile=$karma_shim_file"
done

# ----------
# run tests in gnu 'parallel'
# loading the correct webpack config requires 'npm_lifecycle_event' be set
export npm_lifecycle_event=${npm_lifecycle_event:-test}

# run 'karma' at the project root dir
pushd "${WX2_ADMIN_WEB_CLIENT_HOME}" > /dev/null
karma_process="node ${KTEST__NODE_ARGS} ${WX2_ADMIN_WEB_CLIENT_HOME}/node_modules/karma/bin/karma start"

set -x
# shellcheck disable=SC2086
if [ "${no_parallel}" = "true" ]; then
    $karma_process $shim_file_args $pass_through_opts
    exit_status=$?
else
    # number of concurrent jobs run by parallel can be overridden by 'KTEST__PARALLEL_NUM_JOBS' env var
    parallel_num_jobs=${KTEST__PARALLEL_NUM_JOBS:-${num_cores}}
    parallel_job_log=$(mktemp "$temp_dir/parallel_job_log.XXXXX")
    parallel -j"${parallel_num_jobs}" --joblog $parallel_job_log $karma_process $pass_through_opts ::: $shim_file_args
    exit_status=$?
    echo "INFO: parallel job log for ktest:"
    cat "$parallel_job_log" || :
fi
set +x
popd > /dev/null

# ----------
# tidy up
set -x
rm -rf "$temp_dir"
rm -f "${WX2_ADMIN_WEB_CLIENT_HOME}"/karma/flist-split.*
set +x

exit $exit_status
