#!/bin/bash

if [ -z "${WX2_ADMIN_WEB_CLIENT_HOME}" ]; then
    >&2 echo "Error: WX2_ADMIN_WEB_CLIENT_HOME is not set, please export this environment variable first."
    exit 1
fi

# sniff-test function for whether current environment looks like jenkins
# - ported over from '.../utils/processEnvUtils.js'
function is_ci {
    if [ -z "$BUILD_NUMBER" ] || \
        [ -z "$JOB_NAME" ] || \
        [ -z "$JENKINS_URL" ]; then
        return 1
    fi
}

function export_env_var_assignment {
    local line=$*

    # line uses a var, use eval
    if [[ "$line" =~ =.*\$ ]]; then
        eval "export $line"
        return
    fi

    # line is blank, skip
    if [[ "$line" =~ ^[[:space:]]*$ ]]; then
       return
    fi

    # line is comment, skip
    if [[ "$line" =~ ^[[:space:]]*# ]]; then
        return
    fi

    # default
    # shellcheck disable=SC2163
    export "$line"
}

# parse properties file and export each property as an env var
function inj_env_vars_from_file {
    local env_var_name
    while read -r line; do
        # process the line and export
        export_env_var_assignment "$line"

        # print to stdout as appropriate
        env_var_name="$(get_env_var_name "$line")"
        if [ -n "$env_var_name" ]; then
            echo "${env_var_name}=$(printenv "$env_var_name")"
        fi
    done < "$1"
}

function get_env_var_name {
    local line=$*
    line="${line/\#*/}"  # remove substring after a '#' char (ie. comments)
    line="${line/\=*/}"  # remove substring after a '=' char (ie. value)
    line="${line//[[:space:]]/}"  # remove any spaces
    echo "$line"
}

function inj_build_env_vars_for {
    local env="$1"
    case "$env" in
        "dev" )
            inj_env_vars_from_file "${WX2_ADMIN_WEB_CLIENT_HOME}/config/env-vars/common"
            inj_env_vars_from_file "${WX2_ADMIN_WEB_CLIENT_HOME}/config/env-vars/dev"
            ;;
        "nightly" )
            inj_env_vars_from_file "${WX2_ADMIN_WEB_CLIENT_HOME}/config/env-vars/common"
            inj_env_vars_from_file "${WX2_ADMIN_WEB_CLIENT_HOME}/config/env-vars/nightly"
            ;;
        "pipeline" )
            inj_env_vars_from_file "${WX2_ADMIN_WEB_CLIENT_HOME}/config/env-vars/common"
            inj_env_vars_from_file "${WX2_ADMIN_WEB_CLIENT_HOME}/config/env-vars/pipeline"
            ;;
        * )
            >&2 echo "[ERROR] ${FUNCNAME[0]}: invalid choice: $env"
            return 1
            ;;
    esac
}
