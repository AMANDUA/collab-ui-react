#!/bin/bash

# early out if this file has already been sourced
if type unset_setup_helpers >/dev/null 2>&1; then
    return
fi

manifest_checksums_file=".manifest-checksums"
manifest_files="package.json yarn.lock"
project_root_env_var_name="WX2_ADMIN_WEB_CLIENT_HOME"

# reset function (use this when needing to re-source this file)
function unset_setup_helpers {
    unset unset_setup_helpers
}

# test if given arg is defined for the current shell
function is_installed {
    command -v "$1" >/dev/null 2>&1
    return $?
}

# install GNU parallel for known used OS's
function install_gnu_parallel {
    # Mac (as of Yosemite)
    if is_installed "brew"; then
        brew install parallel
        return $?
    # Fedora (as of F23)
    elif is_installed "dnf"; then
        sudo dnf install -y parallel
        return $?
    # CentOS (as of CentOS 7)
    elif is_installed "yum"; then
        sudo yum install -y parallel
        return $?
    # Ubuntu (as of 14.04)
    elif is_installed "apt-get"; then
        sudo apt-get update
        sudo apt-get install -y parallel
        return $?
    fi
    >&2 echo "[ERROR] ${FUNCNAME[0]} package manager on this OS is not supported."
    return 1
}

# install 'yarn' for known used OS's ('nvm' is assumed installed already)
# - see: https://yarnpkg.com/lang/en/docs/install
function install_yarn {
    # Mac (as of Yosemite)
    if is_installed "brew"; then
        brew install yarn --without-node
        return $?

    elif is_installed "dnf" || is_installed "yum"; then
        sudo wget "https://dl.yarnpkg.com/rpm/yarn.repo" -O "/etc/yum.repos.d/yarn.repo"
        # Fedora (as of F23)
        if is_installed "dnf"; then
            sudo dnf install -y yarn
            return $?
        # CentOS (as of CentOS 7)
        elif is_installed "yum"; then
            # workaround (as of 2017-08-15):
            # - see: https://bugs.centos.org/view.php?id=13669&nbn=1
            # - install rpm 'http-parser-2.7.1-3.el7.x86_64.rpm' from koji until EPEL team fixes the next 'nodejs-6.11.*' rpm
            sudo rpm -Uvh "https://kojipkgs.fedoraproject.org//packages/http-parser/2.7.1/3.el7/x86_64/http-parser-2.7.1-3.el7.x86_64.rpm"
            sudo yum install -y yarn
            return $?
        fi

    # Ubuntu (as of 14.04)
    elif is_installed "apt-get"; then
        curl -sS "https://dl.yarnpkg.com/debian/pubkey.gpg" | sudo apt-key add -
        echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee "/etc/apt/sources.list.d/yarn.list"
        sudo apt-get update
        sudo apt-get install -y yarn
        return $?
    fi

    >&2 echo "[ERROR] ${FUNCNAME[0]} failed."
    >&2 echo "- for alternate install instructions, see: https://yarnpkg.com/lang/en/docs/install/"
    return 1
}

# quietly validate checksums
function is_checksums_ok {
    local checksum_file=${1:-$manifest_checksums_file}
    shasum -c "$checksum_file" > /dev/null && return 0 || return 1
}

# generate a new checksum file
function mk_checksum_file {
    local checksum_file=${1:-$manifest_checksums_file}
    shift
    if [ $# -eq 0 ]; then
        local files_list=${manifest_files}
    else
        local files_list=$*
    fi
    > "$checksum_file"
    for f in $files_list; do
        shasum "$f" >> "$checksum_file"
    done
}

function set_local_npm_path {
    export PATH="$PATH:./node_modules/.bin"
    # shellcheck disable=SC2016
    echo '[[ "$PATH" == *"./node_modules/.bin"* ]] || export PATH="$PATH:./node_modules/.bin"' >> "$HOME/$(get_bash_conf_file)"
}

# TODO: rm this after confirming no longer needed
function set_global_npm_path {
    export PATH="$PATH:/usr/local/bin"
    # shellcheck disable=SC2016
    echo '[[ "$PATH" == *"/usr/local/bin"* ]] || export PATH="$PATH:/usr/local/bin"' >> "$HOME/$(get_bash_conf_file)"
}

function set_atlas_web_bin_path {
    local atlas_web_bin_path="$1"
    export PATH="$PATH:${atlas_web_bin_path}"
    # shellcheck disable=SC2016
    echo '[[ "$PATH" == *"'"${atlas_web_bin_path}"'"* ]] || export PATH="$PATH:'"${atlas_web_bin_path}"'"' >> "$HOME/$(get_bash_conf_file)"
}

# clean up all files, but leave most recently modified <num_to_leave> files
# usage: rm_all_but_last <num_to_leave> <file_glob>
function rm_all_but_last {
    local count=${1} && shift

    # early out if glob pattern matches no files
    ls "$@" >/dev/null 2>/dev/null || return 1

    # - list files from args (globs will have been expanded)
    # - trim out the first ${count} items
    # - wrap each remaining item in double-quotes
    # - pass to 'rm -f'
    # shellcheck disable=SC2012
    ls -1t "$@" \
        | tail -n +"$((count + 1))" \
        | sed -e 's/.*/"&"/g' \
        | xargs rm -f
}

function get_most_recent {
    # shellcheck disable=SC2012
    ls -1tr "$@" 2>/dev/null | tail -1
}

function get_head_commit_id {
    git log -n1 --pretty=format:'%h'
}

function mk_npm_deps_tar {
    cd "${WX2_ADMIN_WEB_CLIENT_HOME}" || return 1
    local target_files=( "package.json" "node_modules" )
    local commit_id="${1:-$(get_head_commit_id)}"
    mk_deps_tar "npm-deps" "${commit_id}" "${target_files[@]}"
    # shellcheck disable=SC2164
    cd ~-
}

function mk_deps_tar {
    local cache_dir="${WX2_ADMIN_WEB_CLIENT_HOME}/.cache"
    local archive_basename="${1}"
    local commit_id="${2}"
    archive_basename="${archive_basename}-for-${commit_id}.tar.gz"
    shift 2
    local files_to_archive=( "$@" )
    tar -czf "${cache_dir}/${archive_basename}" "${files_to_archive[@]}"
}

function restore_latest_deps {
    get_top_dir >/dev/null || return 1
    top_dir="$(get_top_dir)"
    # shellcheck disable=SC2086
    last_npm_deps_tar="$(get_most_recent ${top_dir}/.cache/npm-deps-for-*)"
    tar_opts="$*"

    if [ -n "${last_npm_deps_tar}" ]; then
        set -x
        rm -rf ./node_modules
        tar "${tar_opts}" -xzf "${last_npm_deps_tar}"
        set +x
    else
        # no built deps exist
        return 1
    fi
}

# define and export project root dir, and add it to bash config
function get_bash_conf_file {
    if [ "$(uname)" = "Darwin" ]; then
        echo ".bash_profile"
    else
        echo ".bashrc"
    fi
}

function get_top_dir {
    local cwd
    cwd="$(pwd)"
    # get project top-level dir (look for 'build.sh')
    while [ ! -r "build.sh" ] && [ "$(pwd)" != "/" ]; do
      cd ..
    done
    top_dir=$(pwd)
    cd "$cwd" || return 1
    if [ "$top_dir" = "/" ]; then
        >&2 echo "[ERROR] traversed to '/' while trying to find top-level dir"
        return 1
    fi
    echo "$top_dir"
}

function export_project_root_env_var {
    local bash_conf_file
    bash_conf_file="$HOME/$(get_bash_conf_file)"
    local entry_line_prefix="^export ${project_root_env_var_name}="
    local entry_line=
    local top_dir=

    get_top_dir >/dev/null || return 1

    top_dir="$(get_top_dir)"
    entry_line="export $project_root_env_var_name=$top_dir"

    if grep -q "$entry_line_prefix" "$bash_conf_file"; then
        sed -i -E "s,${entry_line_prefix}.*,${entry_line}," "$bash_conf_file"
    else
        echo "" >> "$bash_conf_file"
        echo "${entry_line}" >> "$bash_conf_file"
    fi
    eval "$entry_line"
}

# notes:
# - 'nvm' will install itself by default to '.bashrc'
# - in OSX, default terminal sessions load '.bash_profile', NOT '.bashrc' on new sessions
# - so we modify '.bash_profile' to load '.bashrc' by default, as needed
function update_bash_profile_to_source_bashrc_as_needed {
    local bash_profile_file
    bash_profile_file="$HOME/.bash_profile"
    local entry_line='\[\[ -s \"\$HOME/.bashrc\" \]\] && source \"\$HOME/.bashrc\"'
    local grep_term="^$entry_line"
    local unescaped_entry_line
    unescaped_entry_line="$(echo "$entry_line" | sed -E 's/\\(.)/\1/g')"  # <= unescape backslashes
    if [ "$(uname)" = "Darwin" ]; then
        if ! grep -q "$grep_term" "$bash_profile_file"; then
            echo "[INFO] '.bash_profile' must source '.bashrc' for \`nvm\` support in shell, updating..."
            echo "[WARNING] If you were already sourcing '.bashrc', please check '.bash_profile' to ensure it is not sourced twice."
            echo "" >> "$bash_profile_file"
            echo "# source in .bashrc" >> "$bash_profile_file"
            echo "$unescaped_entry_line" >> "$bash_profile_file"
        fi
    fi
}

# make sure WX2_ADMIN_WEB_CLIENT_HOME is set
export_project_root_env_var

# in OSX, make sure '.bash_profile' sources '.bashrc'
update_bash_profile_to_source_bashrc_as_needed

# Check NPM local path
# shellcheck disable=SC2015
[[ "$PATH" == *"./node_modules/.bin"* ]] && echo "Local NPM path is set" || set_local_npm_path

# Check NPM global path
# shellcheck disable=SC2015
[[ "$PATH" == *"/usr/local/bin"* ]] && echo "Global NPM path is set" || set_global_npm_path

# Check Atlas web path
atlas_web_bin_path="$(get_top_dir)/bin"
# shellcheck disable=SC2015
[[ "$PATH" == *"${atlas_web_bin_path}"* ]] && echo "Atlas web project bin path is set" || set_atlas_web_bin_path "${atlas_web_bin_path}"

# setup .cache subdir
mkdir -p "${WX2_ADMIN_WEB_CLIENT_HOME}/.cache"
