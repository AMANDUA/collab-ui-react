# early out if this file has already been sourced
if type unset_setup_helpers >/dev/null 2>&1; then
    return
fi

last_refreshed_file=".last-refreshed"
manifest_checksums_file=".manifest-checksums"
manifest_files="package.json config/tsd.json"
dependency_dirs="./node_modules"
project_root_env_var_name="WX2_ADMIN_WEB_CLIENT_HOME"

# reset function (use this when needing to re-source this file)
function unset_setup_helpers {
    unset unset_setup_helpers
}

# test if given arg is defined for the current shell
function is_installed {
    type $1 >/dev/null 2>&1
    return $?
}

# install GNU Parallel for known used OS's
function install_parallel_as_needed {
    set -x
    if ! is_installed "parallel"; then
        if is_installed "brew"; then
            brew install parallel                  # Mac (as of Yosemite)
        elif is_installed "dnf"; then
            sudo dnf install -y parallel           # Fedora (as of F23)
        elif is_installed "yum"; then
            sudo yum install -y parallel           # CentOS (as of CentOS 7)
        elif is_installed "apt-get"; then
            sudo apt-get update                    # Ubuntu (as of 14.04)
            sudo apt-get install -y parallel
        else
            >&2 echo "Error: package manager on this OS is not supported."
            return 1
        fi
    fi
    set +x
}

# install C++ compiler as needed
function install_cpp_compiler_as_needed {
    if ! is_installed "c++"; then
        # Mac
        if [ "`uname`" = "Darwin" ]; then
            echo "Error: please install a C++ compiler - see: https://developer.apple.com/xcode/"
            return 1
        fi
        if is_installed "dnf"; then
            sudo dnf install -y gcc-c++            # Fedora (as of F23)
        elif is_installed "yum"; then
            sudo yum install -y gcc-c++            # CentOS (as of CentOS 7)
        elif is_installed "apt-get"; then
            sudo apt-get update                    # Ubuntu (as of 14.04)
            sudo apt-get install -y build-essential
        else
            >&2 echo "Error: package manager on this OS is not supported."
            return 1
        fi
    fi
}

# generate a new timestamp file
function mk_last_refreshed_file {
    local timestamp_file=${1:-$last_refreshed_file}
    date +"%Y%m%d%H%M%S" > $timestamp_file
}

# compare if current time minus a given timestamp's file time exceeds a given threshold
function is_time_to_refresh {
    local min_refresh_period=${1:-$(( 60 * 60 * 24 ))}  # default to 24 hours
    local timestamp_file=${2:-$last_refreshed_file}

    # no such file exists, return success
    if [ ! -f $timestamp_file ]; then
        return 0
    else
        set -x
        local t1=`cat $timestamp_file`   # ex. Nov. 6, 2015 3:27:00 PM => '201511152700'
        local t2=`date +"%Y%m%d%H%M%S"`
        [ $(( $t2 - $t1 )) -gt $min_refresh_period ] && return 0 || return 1
        set +x
    fi
}

# quietly validate checksums
function is_checksums_ok {
    local checksum_file=${1:-$manifest_checksums_file}
    shasum -c $checksum_file > /dev/null && return 0 || return 1
}

# generate a new checksum file
function mk_checksum_file {
    local checksum_file=${1:-$manifest_checksums_file}
    shift
    if [ $# -eq 0 ]; then
        local files_list=${manifest_files}
    else
        local files_list=$*
    fi
    > $checksum_file
    for f in $files_list; do
        shasum $f >> $checksum_file
    done
}

# checks existence of a list of dirs
function dirs_exist {
    if [ $# -eq 0 ]; then
        local dirs_list=${dependency_dirs}
    else
        local dirs_list="$*"
    fi
    for dir in $dirs_list; do
        if [ ! -d $dir ]; then
            return 1
        fi
    done
    return 0
}

function set_local_npm_path {
    export PATH="$PATH:./node_modules/.bin"
    echo '[[ "$PATH" == *"./node_modules/.bin"* ]] || export PATH="$PATH:./node_modules/.bin"' >> ~/`get_bash_conf_file`
}

function set_global_npm_path {
    export PATH="$PATH:/usr/local/bin"
    echo '[[ "$PATH" == *"/usr/local/bin"* ]] || export PATH="$PATH:/usr/local/bin"' >> ~/`get_bash_conf_file`
}

function set_atlas_web_bin_path {
    local atlas_web_bin_path="$1"
    export PATH="$PATH:${atlas_web_bin_path}"
    echo '[[ "$PATH" == *"'${atlas_web_bin_path}'"* ]] || export PATH="$PATH:'${atlas_web_bin_path}'"' >> ~/`get_bash_conf_file`
}

# clean up all files, but leave most recently modified <num_to_leave> files
# usage: rm_all_but_last <num_to_leave> <file_glob>
function rm_all_but_last {
    local count=${1} && shift

    # early out if glob pattern matches no files
    ls $@ >/dev/null 2>/dev/null
    if [ $? -ne 0 ]; then
        return 1
    fi
    echo $@ | xargs ls -t | awk "NR>${count}" | sed -e 's/.*/"&"/g' | xargs rm -f
}

function get_most_recent {
    ls -1tr $@ 2>/dev/null | tail -1
}

function get_head_commit_id {
    git log -n1 --pretty=format:'%h'
}

function mk_npm_deps_tar {
    cd ${WX2_ADMIN_WEB_CLIENT_HOME}
    local target_files="package.json node_modules"
    local commit_id="${1:-`get_head_commit_id`}"
    mk_deps_tar "npm-deps" "${commit_id}" ${target_files}
    cd ~-
}

function mk_deps_tar {
    local cache_dir="${WX2_ADMIN_WEB_CLIENT_HOME}/.cache"
    local archive_basename="${1}"
    local commit_id="${2}"
    archive_basename="${archive_basename}-for-${commit_id}.tar.gz"
    shift 2
    local files_to_archive=$@
    tar -czf "${cache_dir}/${archive_basename}" ${files_to_archive}
}

function mk_workspace_tar {
    tmp_dir=`mktemp -d -t atlas-web.XXXXX`
    git clone --depth 1 file://${WX2_ADMIN_WEB_CLIENT_HOME} $tmp_dir
    tar -czf workspace.tar.gz -C $tmp_dir .
    rm -rf $tmp_dir
}

function restore_latest_deps {
    get_top_dir >/dev/null || return 1
    top_dir="`get_top_dir`"
    last_npm_deps_tar="`get_most_recent ${top_dir}/.cache/npm-deps-for-*`"
    tar_opts="$@"

    if [ -n "${last_npm_deps_tar}" ]; then
        set -x
        rm -rf ./node_modules
        tar ${tar_opts} -xzf ${last_npm_deps_tar}
        set +x
    else
        # no built deps exist
        return 1
    fi
}

# define and export project root dir, and add it to bash config
function get_bash_conf_file {
    if [ "`uname`" = "Darwin" ]; then
        echo ".bash_profile"
    else
        echo ".bashrc"
    fi
}

function get_top_dir {
    local cwd=`pwd`
    # get project top-level dir (look for 'fabfile.py')
    while [ ! -r fabfile.py -a "`pwd`" != "/" ]; do
      cd ..
    done
    top_dir=`pwd`
    cd $cwd
    if [ "${top_dir}" = "/" ]; then
        >&2 echo "Error: traversed to '/' while trying to find top-level dir"
        return 1
    fi
    echo $top_dir
}

function export_project_root_env_var {
    local bash_conf_file="$HOME/`get_bash_conf_file`"
    local entry_line_prefix="^export ${project_root_env_var_name}="
    local entry_line=
    local top_dir=

    get_top_dir >/dev/null || return 1

    top_dir="`get_top_dir`"
    entry_line="export $project_root_env_var_name=$top_dir"

    if grep -q "${entry_line_prefix}" ${bash_conf_file}; then
        sed -i -E "s,${entry_line_prefix}.*,${entry_line}," ${bash_conf_file}
    else
        echo "" >> ${bash_conf_file}
        echo "${entry_line}" >> ${bash_conf_file}
    fi
    eval "$entry_line"
}

# make sure WX2_ADMIN_WEB_CLIENT_HOME is set
export_project_root_env_var

# Check NPM local path
[[ "$PATH" == *"./node_modules/.bin"* ]] && echo "Local NPM path is set" || set_local_npm_path

# Check NPM global path
[[ "$PATH" == *"/usr/local/bin"* ]] && echo "Global NPM path is set" || set_global_npm_path

# Check Atlas web path
atlas_web_bin_path="`get_top_dir`/bin"
[[ "$PATH" == *"${atlas_web_bin_path}"* ]] && echo "Atlas web project bin path is set" || set_atlas_web_bin_path "${atlas_web_bin_path}"

# setup .cache subdir
mkdir -p "${WX2_ADMIN_WEB_CLIENT_HOME}/.cache"
